---
- name: Stuff we are always going to do
  tags:
    - always
  block:

    # fail with good error for Automation controller user
    - name: Determine that both AAP and Machine credentials are set
      ansible.builtin.assert:
        that:
          - "lookup('ansible.builtin.env', 'CONTROLLER_USERNAME') !=''"
          - "lookup('ansible.builtin.env', 'CONTROLLER_HOST') !=''"
          - "lookup('ansible.builtin.env', 'CONTROLLER_PASSWORD') !=''"
        fail_msg:
          - "Red Hat Ansible Automation Platform credential is not set"
          - "Please assign correct credentials to the Job Template"

    - name: Create a new token
      ansible.platform.token:
        aap_hostname: "{{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}"
        aap_username: "{{ lookup('ansible.builtin.env', 'CONTROLLER_USERNAME') }}"
        aap_password: "{{ lookup('ansible.builtin.env', 'CONTROLLER_PASSWORD') }}"
        aap_validate_certs: false
        description: Windows Inventory
        scope: write
        state: present

- name: Adding our new vm to our inventory
  tags:
    - create
  block:

    - name: Get Demo instances we care about
      register: instance_info
      amazon.aws.ec2_instance_info:
        region: "{{ vpc_region }}"
        filters:
          tag:Name: "{{ vm_name }}"
          instance-state-name: [running]

    - name: Update the AAP Managed Inventory
      loop: "{{ instance_info['instances'] }}"
      ansible.controller.host:
        controller_host: "{{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}"
        controller_oauthtoken: "{{ aap_token['token'] }}"
        validate_certs: false
        name: "{{ item['public_dns_name'] }}"
        inventory: "{{ inventory_name }}"
        state: present
        enabled: true

    - name: Create a group
      loop: "{{ instance_info['instances'] }}"
      ansible.controller.group:
        controller_host: "{{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}"
        controller_oauthtoken: "{{ aap_token['token'] }}"
        validate_certs: false
        name: windemo
        description: Automation Controller Group
        inventory: "{{ inventory_name }}"
        hosts: "{{ item['public_dns_name'] }}"
        preserve_existing_hosts: true
        variables:
          ansible_connection: winrm
          ansible_winrm_transport: credssp
          ansible_winrm_server_cert_validation: ignore
          ansible_port: 5986
          ansible_winrm_operation_timeout_sec: 180
          ansible_winrm_read_timeout_sec: 240

    - name: Update runtime inventory
      loop: "{{ instance_info['instances'] }}"
      ansible.builtin.add_host:
        name: "{{ item['public_dns_name'] }}"
        groups:
          - windemo

    - name: Remove my token
      ansible.platform.token:
        aap_hostname: "{{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}"
        existing_token: "{{ aap_token }}"
        aap_token: "{{ aap_token['token'] }}"
        aap_validate_certs: false
        state: absent

- name: Removing our vm from our inventory
  tags:
    - remove
  block:

    - name: Remove inventory host groups
      loop:
        - windemo
      ansible.controller.group:
        controller_host: "{{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}"
        controller_oauthtoken: "{{ aap_token['token'] }}"
        validate_certs: false
        name: "{{ item }}"
        inventory: "{{ inventory_name }}"
        state: absent

    - name: Remove my token
      ansible.platform.token:
        aap_hostname: "{{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}"
        existing_token: "{{ aap_token }}"
        aap_token: "{{ aap_token['token'] }}"
        aap_validate_certs: false
        state: absent
